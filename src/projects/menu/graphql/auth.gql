
# 获取极验证验证码
mutation newCaptcha{
  newCaptcha {
    challenge
    success
    gt
    new_captcha
  }
}

# 用户名登陆
mutation newTokenByUserName($userName: String!, $password: String!, $challenge: String!, $validate: String!, $seccode: String!, $serverNos: [String], $companyNos: [String], $lesseeId: String){
    newTokenByUserName(userName: $userName, password: $password, challenge: $challenge, validate: $validate, seccode: $seccode, serverNos: $serverNos, companyNos: $companyNos, lesseeId: $lesseeId){
        token
        tokenType
        expiresIn
        refreshToken
    }
}

# 验证用户名是否存在 return Boolean
query existUserByUserName($userName:String!){
  existUserByUserName(userName:$userName)
}

# 发送手机验证码 return Boolean
mutation newVerifyCodeByMobileNo($mobileNo: String!) {
  newVerifyCodeByMobileNo(mobileNo: $mobileNo)
}


# 验证手机验证码是否存在 return Boolean
query existVerifyCodeByMobileNo($mobileNo:String!,$verifyCode:String!){
  existVerifyCodeByMobileNo(mobileNo:$mobileNo, verifyCode:$verifyCode)
}

# 手机号登陆登陆
mutation newTokenByMobileNo($mobileNo: String!, $verifyCode: String!, $serverNos: [String], $companyNos: [String], $lesseeId: String){
    newTokenByMobileNo(mobileNo: $mobileNo, verifyCode: $verifyCode, serverNos: $serverNos, companyNos: $companyNos, lesseeId: $lesseeId){
        token
        tokenType
        expiresIn
        refreshToken
    }
}

# 验证手机验证码是否存在 return Boolean
query existUserByMobileNo($mobileNo:String!){
  existUserByMobileNo(mobileNo:$mobileNo)
}

# 手机号创建用户
mutation newUserByMobileNo(
  $mobileNo: String!
  $verifyCode: String!
  $password: String
  $idCard: String
  $name: String
  $email: String
  $emailVerifyCode: String
) {
  newUserByMobileNo(
    userNewByMobileNo: {
      mobileNo: $mobileNo
      verifyCode: $verifyCode
      password: $password
      idCard: $idCard
      name: $name
      email: $email
      emailVerifyCode: $emailVerifyCode
    }
  ) {
    token
  }
}


# 查询基本信息
query userByMe($token: String!) {
  userByMe(token: $token) {
    userName
    name
    idCard
    userId
    mobileNo
    email
    headpic
    lastLoginDate
    lastResetDate
    createTime
    updateTime
    status
    certifiedStatus
    isPwd
  }
}


# 修改基本信息
mutation editUserByMe($token: String!, $userEditByMe: UserEditByMe!) {
  editUserByMe(token: $token, userEditByMe: $userEditByMe) {
    userName
    name
    idCard
    userId
    mobileNo
    email
    headpic
    lastLoginDate
    lastResetDate
    createTime
    updateTime
    status
  }
}

# 用户与服务的关联关系分页
query userServerByBo($token: String!, $pageNo: Int!, $pageSize: Int!) {
  userServerByBo(token: $token,  pageNo: $pageNo, pageSize: $pageSize) {
    pageNo
    pageSize
    pageTotalRows
    pageTotalCount
    pageRows {
      linkId
      user{
        userId
        idCard
        userName
        name
        mobileNo
      }
      server{
        serverNo
        serverName
        groupId
        groupName
      }
    }
  }
}

# 用户与企业的关联关系查询
query userCompanyByBo($token: String!, $pageNo: Int!, $pageSize: Int!) {
  userCompanyByBo(token: $token, pageNo: $pageNo, pageSize: $pageSize) {
    pageNo
    pageSize
    pageTotalRows
    pageTotalCount
    pageRows {
      linkId
      user {
        userId
        idCard
        userName
        name
        mobileNo
      }
      company {
        companyNo
        companyName
        groupId
        groupName
      }
    }
  }
}

# 认证服务运营管理员-新增用户与企业的关联关系
mutation newUserCompanyByBo($token: String!, $userId: String!, $authorizeId: String!) {
  newUserCompanyByBo(token: $token, userId: $userId, authorizeId: $authorizeId) {
    linkId
    user {
      userId
      userName
    }
    company {
      authorizeId
      groupId
    }
  }
}

# 认证服务运营管理员-新增用户与服务的关联关系
mutation newUserServerByBo($token: String!, $userId: String!, $authorizeId: String!) {
  newUserServerByBo(token: $token, userId: $userId, authorizeId: $authorizeId) {
    linkId
    user {
      userId
      userName
    }
    server {
      authorizeId
      groupId
    }
  }
}

# 认证服务运营管理员-删除用户与企业的关联关系 return boolean
mutation delUserCompanyByBo($token:String!, $linkId:String!){
  delUserCompanyByBo(token:$token, linkId:$linkId)
}

mutation delUserServerByBo($token: String!, $linkId: String!) {
  delUserServerByBo(token: $token, linkId: $linkId)
}

# 用户与企业的关联关系删除
mutation delCompanyByTo($token:String!, $authorizeId:String!){
  delCompanyByTo(token:$token, authorizeId:$authorizeId)
}

# 认证服务运营管理员-分页所有用户信息
query userByBo($token: String!, $pageNo: Int!, $pageSize: Int!, $key: String) {
  userByBo(token: $token, pageNo: $pageNo, pageSize: $pageSize, key: $key) {
    pageNo
    pageSize
    pageTotalRows
    pageTotalCount
    pageRows {
      userId
      mobileNo
      userName
      email
      status
      createTime
      updateTime
      lastLoginDate
      lastResetDate
      name
      certifiedStatus
      headpic
    }
  }
}

# 认证服务运营管理员-修改用户信息
mutation editUserByBo($token:String!, $userEditByBo:UserEditByBo!){
  editUserByBo(token:$token, userEditByBo:$userEditByBo){
    userId
    mobileNo
    idCard
    userName
    email
    status
    createTime
    updateTime
    lastLoginDate
    lastResetDate
    name
    certifiedStatus
    headpic
  }
}

# 认证服务管理员-新增用户时的信息
mutation newUserByBo($token: String!, $userNewByAdmin: UserNewByAdmin!) {
  newUserByBo(token: $token, userNewByAdmin: $userNewByAdmin){
    userId
  }
}

# 头像上传获取的oss地址
mutation ossSts($token: String!, $path: [String!]!) {
  ossSts(token: $token, path: $path) {
    accessKeyId
    accessKeySecret
    stsToken
    expiration
  }
}

# 查询基本信息
query companyByToken($token: String!) {
  companyByToken(token: $token) {
    companyNo
    companyName
  }
}
# 查询接入企业信息
query companyByTo($token: String!, $pageNo: Int!, $pageSize: Int!, $key: String) {
  companyByTo(token: $token, pageNo: $pageNo, pageSize: $pageSize, key: $key) {
    pageNo
    pageSize
    pageTotalRows
    pageTotalCount
    pageRows {
      authorizeId
      companyNo
      companyName
      groupId
      groupName
      createTime
      updateTime
    }
  }
}

# 用户授权选择
query companyWithUserByBo($token: String!, $userId: String!, $pageNo: Int!, $pageSize: Int!) {
  companyWithUserByBo(token: $token, userId: $userId, pageNo: $pageNo, pageSize: $pageSize) {
    pageNo
    pageSize
    pageTotalRows
    pageTotalCount
    pageRows {
      authorizeId
      companyNo
      companyName
      groupId
      groupName
      createTime
      updateTime
    }
  }
}

mutation newCompanyByTo($token: String!, $companyNo: String!, $companyName: String!, $groupId: String, $groupName: String) {
  newCompanyByTo(token: $token, companyNo: $companyNo, companyName: $companyName, groupId: $groupId, groupName: $groupName) {
    authorizeId
    companyNo
    companyName
    groupId
    groupName

  }
}

query serverByTo($token: String!, $pageNo: Int!, $pageSize: Int!, $key: String) {
  serverByTo(token: $token, pageNo: $pageNo, pageSize: $pageSize, key: $key) {
    pageNo
    pageSize
    pageTotalRows
    pageTotalCount
    pageRows {
      authorizeId
      serverNo
      serverName
      groupId
      groupName
      createTime
      updateTime
    }
  }
}

# 用户授权选择
query serverWithUserByBo($token: String!, $userId: String!, $pageNo: Int!, $pageSize: Int!) {
  serverWithUserByBo(token: $token, userId: $userId, pageNo: $pageNo, pageSize: $pageSize) {
    pageNo
    pageSize
    pageTotalRows
    pageTotalCount
    pageRows {
      authorizeId
      serverNo
      serverName
      groupId
      groupName
      createTime
      updateTime
    }
  }
}

mutation newServerByTo($token: String!, $serverNo: String!, $serverName: String!,$groupId: String,$groupName: String) {
  newServerByTo(token: $token, serverNo: $serverNo, serverName: $serverName,groupId: $groupId,groupName: $groupName) {
    authorizeId
    serverNo
    serverName
    groupId
    groupName
  }
}

mutation delServerByTo($token: String!, $authorizeId: String!) {
  delServerByTo(token: $token, authorizeId: $authorizeId)
}

# 企业名称或信用代码是否存在的接口
query existOrgCodeOrOrgName($orgCode: String, $orgName: String) {
  existOrgCodeOrOrgName(orgCode: $orgCode, orgName: $orgName)
}
